{
    "correct": [
        {
            "title": "deploying a flask application to heroku",
            "content": "deploying a flask application to heroku introduction in this tutorial you will learn how to deploy a flask application to heroku the app can be as simple as a hello world app to a social media monitoring platform nowadays there is no business that doesnt have a web app to help it a reach greater audience or maybe provide its services through an online portal today you are about to learn how to make an api using flask as a case study for how to deploy your app on heroku building a rest api with flask in your project directory lets start off by creating a virtualenv python m venv venv and lets activate it with the source command source venv bin activate then lets use pip to install the libraries were going to use flask to build the app and gunicorn as our server pip install flask pip install gunicorn our application is going to be a simple api that receives a name and returns a welcome message app py from flask import flask request jsonify app flask name app route getmsg methods def post something param request form get name print param you can add the test cases you made in the previous function but in our case here you are just testing the post functionality if param return jsonify message f welcome name to our awesome platform add this option to distinct the post request method post else return jsonify error no name found please send a name a welcome message to test our server app route def index return h welcome to our server h if name main threaded option to enable multiple instances for multiple user access support app run threaded true port to test your application locally lets hit the http endpoint if everything is fine we should be greeted with a welcome message we can also send a name as a parameter such as http localhost getmsg name mark message welcome mark to our awesome platform with our application ready lets deploy it to heroku heroku heroku is one of the first cloud platform as a service paas and supports several languages ruby java node js scala clojure python php and go the first thing we need to do is define which libraries our application uses that way heroku knows which ones to provide for us similar to how we install them locally when developing the app to achieve this we need to create a requirements txt file with all of the modules pip freeze requirements txt this way we end up with a requirements txt file that contains the libraries were using and their versions click flask gunicorn itsdangerous jinja markupsafe werkzeug note one of the common mistakes is misspelling requirements it is a real pain when you debug your code for hours and find out that the app doesnt run because the server didnt download the modules the only way for heroku to know the modules that you are using is to add them to the requirements txt file so be careful for heroku to be able to run our application like it should we need to define a set of processes commands that it should run beforehand these commands are located in the procfile web gunicorn app app the web command tells heroku to start a web server for the application using gunicorn since our application is called app py weve set the app name to be app as well heroku account now we should create a heroku account once that is out of the way on the dashboard select new create new app choose a name for the application and choose a region of where youd like to host it once the application is created on heroku were ready to deploy it online git to upload our code well use git first lets make a git repository git init and now lets add our files and commit git add app py procfile requirements txt git commit m first commit deploying the app to heroku to finally deploy the application well need to install the heroku cli with which well run heroku related commands lets login to our account using our credentials by running the command heroku login i alternatively we can login using the browser if we run the command heroku login at this point while logged in we should add our repository to the remote one heroku git remote a your project name be sure to replace your project name with the actual name of your project you selected in the earlier step and with that done lets upload the project by pushing it to heroku git push heroku master a lengthy progress log should come up on your terminal ending with remote discovering process types remote procfile declares types web remote remote compressing remote done remote launching remote released v remote your project name herokuapp com deployed to heroku remote remote verifying deploy done to git heroku com your project name git ae master master congratulations you have successfully uploaded your first web app to heroku its now time now to test and verify our api testing the api in the log that has been shown in the console you will find a link for your application your project name herokuapp com this link can also be found under the settings tab in the domains and certificates section visiting the link we can reach our application which is now online and public in case there were any errors you can access the logs and troubleshoot from there you can manually test your app in the browser by typing the url and adding the path for the getmsg route though as applications tend to get more and more complex its advised to use tools like postman now lets test the get request to our application with a name parameter now lets test a url that isnt bound to any function like for example newurl with a get request as expected our flask app returned a response note you can change the view of the output from pretty raw and preview which shows you how the output would look in your browser now lets test a post request also lets see what happens if we completely omit the name parameter error no name found please send a name weve tested our app and confirmed that everything is working fine to see the history of your server and what requests were made you can check the logs for your site via heroku you can see here the post request we made to our page post also you can see the history of building the application moreover if theres any problem during building you can find it in the log page conclusion in this article we showed a simple example of building our first simple api on heroku using the flask micro framework the development process remains the same as you continue to build your application heroku offers a free plan and student plans the free plan is limited but it works pretty good for a starting app poc or a simple project for example however if you want to scale your application then youll want to consider one of the plans that are available on the site from here for more info on heroku you can check the heroku manual itself"
        }
    ],
    "incorrect": [
        {
            "title": "javascript settimeout tutorial how to use the js equivalent of sleep wait delay and pause",
            "content": "javascript is the language of the web and it hasnt been the same since es was released more and more ideas and features are being ported from different languages and being integrated in javascript one of those features are promises which are probably the most widely used feature in javascript after es was released but one of the things which javascript misses is a way to pause execution for a while and resume it later in this post ill discuss how you can achieve that and what it really means to pause or sleep in javascript spoiler javascript never really pauses tl dr heres the copy pasta code which does the job param duration enter duration in seconds function sleep duration return new promise resolve settimeout resolve duration but what is really happening here settimeout and fake promises lets see a quick example using the above snippet well discuss whats happening in it later async function performbatchactions perform an api call await performapirequest sleep for seconds await sleep perform an api call again await performapirequest this function performbatchactions when called simply executes the performapirequest function waits about seconds and then calls the same function again note how i wrote about seconds and not seconds a strong note to put out there the above code does not guarantee a perfect sleep it means that if you specify duration to be say second javascript does not guarantee that it will start running the code after the sleep exactly after second why not you may ask unfortunately its because timers work in javascript and in general event loops however javascript absolutely guarantees that the piece of code after the sleep will never execute before the specified time so we dont really have a full indeterminate situation just a partial one and in most cases its within a margin of a few milliseconds only javascript is single threaded a single thread means that a javascript process cannot really go out of the way at all it has to do all the things from event listeners to http callbacks on the same main thread and when one thing is executing another one cannot execute consider a webpage in which you have multiple buttons and you run the code above to simulate a sleep for lets say seconds what do you expect will happen nothing at all your webpage will work just fine your buttons will be responsive and once the second sleep is done the code next to it will execute so its evident that javascript does not really block the whole main thread because if it did that your webpage would have frozen and the buttons would have become non clickable so how did javascript actually pause a single thread without ever really pausing it meet the event loop unlike other languages javascript doesnt just keep on executing code in a linear fashion from top to bottom it is an asynchronous event driven language with tons of magic in the form of the event loop an event loop splits your code in synchronous and certain events like timers and http requests precisely speaking there are two queues a task queue and microtask queue whenever you run js and theres an asynchronous thing like a mouseclick event or a promise javascript throws it in the task queue or microtask queue and keeps executing when it completes a single tick it checks if the task queues and microtask queue have some work for it if yes then itll execute the callback perform an action i would really recommend anyone interested in the detailed workings of event loops to watch this video conclusion you came here for a simple sleep instruction in javascript and ended up learning about one of the core things in javascript event loops amazing isnt it well if you liked the article checkout codedamn a platform ive been building for developers and learners like you also lets connect on social media twitter and instagram see you soon peace"
        },
        {
            "title": "http methods get vs post",
            "content": "http request methods what is http the hypertext transfer protocol http is designed to enable communications between clients and servers http works as a request response protocol between a client and server example a client browser sends an http request to the server then the server returns a response to the client the response contains status information about the request and may also contain the requested content http methods get post put head delete patch options the two most common http methods are get and post the get method get is used to request data from a specified resource get is one of the most common http methods note that the query string name value pairs is sent in the url of a get request test demo form php name value name value some other notes on get requests get requests can be cached get requests remain in the browser history get requests can be bookmarked get requests should never be used when dealing with sensitive data get requests have length restrictions get requests are only used to request data not modify the post method post is used to send data to a server to create update a resource the data sent to the server with post is stored in the request body of the http request post test demo form php http host w com name value name value post is one of the most common http methods some other notes on post requests post requests are never cached post requests do not remain in the browser history post requests cannot be bookmarked post requests have no restrictions on data length the put method put is used to send data to a server to create update a resource the difference between post and put is that put requests are idempotent that is calling the same put request multiple times will always produce the same result in contrast calling a post request repeatedly have side effects of creating the same resource multiple times the head method head is almost identical to get but without the response body in other words if get users returns a list of users then head users will make the same request but will not return the list of users head requests are useful for checking what a get request will return before actually making a get request like before downloading a large file or response body the delete method the delete method deletes the specified resource the options method the options method describes the communication options for the target resource compare get vs post the following table compares the two http methods get and post"
        }
    ]
}